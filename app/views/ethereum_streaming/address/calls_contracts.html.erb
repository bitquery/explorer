<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='LatestSmartContractCalls'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='SmartContractCallsIncludingInternalByDate'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='TopGasCostCalls'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='SmartContractsCalled'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='SmartContractMethodsCalled'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<script type="module">
    class LatestSmartContractCalls extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Latest Smart Contract Calls by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'LatestSmartContractCalls',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink,
                    },
                    {
                        name: 'Smart Contract', cell: row => row.Call.To,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Method',
                        cell: row => ({
                            method: row.Call.Signature.Name,
                            hash: row.Call.Signature.SignatureHash,
                            value: row.Call.Value
                        }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Gas Cost',
                        cell: row => ({amount: row.Fee.SenderFee, usd: row.Fee.SenderFeeInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Transaction hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                    },
                ]
            }
        }
    }

    class SmartContractCallsIncludingInternalByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name ? `by (${response.EVM.token_info[0]?.Transfer.Currency.Name})` : ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Daily Smart Contract Calls  (Including Internal) ${tokenName} ${tokenSymbol}`
                },
                id: 'SmartContractCallsIncludingInternalByDate',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Calls count', cell: row => +row.count,
                    }
                ],
                options: {
                    theme: 'material',
                }
            }
        }
    }

    class TopGasCostCalls extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Top Gas Cost Calls by (Including Internal) by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'TopGasCostCalls',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Timestamp', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink,
                    },
                    {
                        name: 'Smart Contract', cell: row => row.Call.To,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Method',
                        cell: row => ({
                            method: row.Call.Signature.Name,
                            hash: row.Call.Signature.SignatureHash,
                            value: row.Call.Value
                        }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Gas Cost',
                        cell: row => ({amount: row.Fee.SenderFee, usd: row.Fee.SenderFeeInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Transaction hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '145px'},
                    },
                ]
            }
        }
    }

    class SmartContractsCalled extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Top Smart Contracts Called by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'SmartContractsCalled',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Smart Contract', cell: row => row.Call.To,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Gas Cost/Call', cell: row => ({amount: row.sum, usd: row.sum_usd}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Uniq Methods', cell: row => row.uniq,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '115px'},
                    },
                    {
                        name: 'Calls Count', cell: row => row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '110px'},
                    },
                ]
            }
        }
    }

    class SmartContractMethodsCalled extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Calls,
                chainId: response => response.EVM.Calls[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer.Currency.Symbol})` : ''
                    return `Top Smart Contract Methods Called by ${tokenName} ${tokenSymbol} Contract`
                },
                id: 'SmartContractMethodsCalled',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Method',
                        cell: row => ({
                            method: row.Call.Signature.Name,
                            hash: row.Call.Signature.SignatureHash,
                            value: row.Call.Value
                        }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Latest Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Gas Cost/Call', cell: row => ({amount: row.sum, usd: row.sum_usd}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Uniq Methods', cell: row => row.uniq,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Calls Count', cell: row => row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '110px'},
                    },
                ]
            }
        }
    }


    const variables = {
        network: '<%= @streaming%>',
        address: '<%= @address %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 2))).toISOString().slice(0, 10)
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate, tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[LatestSmartContractCalls, '#LatestSmartContractCalls']], 'Latest-Smart-Contract-Calls_8', variables);
        renderComponent('<%=@streaming_access_token %>', [[SmartContractCallsIncludingInternalByDate, '#SmartContractCallsIncludingInternalByDate']], 'Smart-contract-calls--including-internal--by-date_6', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopGasCostCalls, '#TopGasCostCalls']], 'Top-Gas-Cost-Calls_7', variables);
        renderComponent('<%=@streaming_access_token %>', [[SmartContractsCalled, '#SmartContractsCalled']], 'Smart-Contracts-Called_3', variables);
        renderComponent('<%=@streaming_access_token %>', [[SmartContractMethodsCalled, '#SmartContractMethodsCalled']], 'Smart-Contract-Methods-Called_5', variables);
    })
</script>
