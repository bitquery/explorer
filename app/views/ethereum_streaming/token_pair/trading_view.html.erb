<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='OHLCbyIntervalsGraph' class='card'></div>
  </div>
</div>
<script type="module">
    const till = new Date().toISOString().slice(0, 10);
    const tillDate = new Date(till);
    const fromDate = new Date(tillDate.getFullYear(), tillDate.getMonth() - 3, tillDate.getDate()); //change here data for more date
    const from = fromDate.toISOString().slice(0, 10);

    const variables = {
        interval: 15,
        network: '<%= @streaming%>',
        baseCurrency: '<%= @token1 %>',
        quoteCurrency: '<%= @token2 %>',
        from: from,
        till: till,
    }

    class OHLCbyIntervalsGraph extends TradingGraphsComponent {
        configuration() {
            return {
                title: response => {
                    const token1Symbol = response.EVM.token1_info[0]?.Transfer.Currency.Symbol ?  response.EVM.token1_info[0]?.Transfer.Currency.Symbol : ''
                    const token2Symbol = response.EVM.token2_info[0]?.Transfer.Currency.Symbol ? response.EVM.token2_info[0]?.Transfer.Currency.Symbol : ''
                    return `${token1Symbol} / ${token2Symbol}`
                },
                id:'OHLCbyIntervalsGraph',
                symbol: '<%= @token1symbol%> / <%= @token2symbol%>',
                topElement: response => response.EVM?.DEXTradeByTokens,
                chainId: response => response.EVM.DEXTradeByTokens[0]?.ChainId,
                token1: response => response.EVM.DEXTradeByTokens[0]?.Trade.Side.Currency.Symbol,
                token2: response => response.EVM.DEXTradeByTokens[0]?.Trade.Currency.Symbol,
            }
        }
    }
    renderComponent('<%=@streaming_access_token %>',[[OHLCbyIntervalsGraph, '#OHLCbyIntervalsGraph']], 'OHLC-by-intervals_2', variables, 'Subscription-OHLC-with-interval');
</script>
