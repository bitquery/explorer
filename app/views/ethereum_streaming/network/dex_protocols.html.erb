<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='CountOfDEXTradesByProtocol' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>

<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='DEXSmartContractProtocols'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='DEXSmartContractProtocolsPie'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='DEXSmartContracts' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>

<script type="module">
    class CountOfDEXTradesByProtocol extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Daily DEX Trade Volume by Protocol on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id:'CountOfDEXTradesByProtocol',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date
                    },
                    {
                        name: row => `${row.Trade.Dex.ProtocolFamily} ${row.Trade.Dex.ProtocolVersion}`,
                        cell: row => +row.count
                    },
                ],
                options: {
                    isStacked: true,
                    theme: 'material',
                    height: 363,
                    chartArea: {
                        left: 100,
                        width: '75%',
                    },
                }
            }
        }
    }

    class DEXSmartContractProtocols extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Top DEX Protocols by Trade Volume on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Protocol', cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Trades', cell: row => row.trades,
                    },
                    {
                        name: 'Currencies', cell: row => row.currencies,
                    },
                    {
                        name: 'Contracts', cell: row => row.contracts,
                    },
                ]
            }
        }
    }

    class DEXSmartContractProtocolsPie extends PieChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Market Share of DEX Protocols by Trade Count on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'DEXSmartContractProtocolsPie',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Protocol', cell: row => `${row.Trade.Dex.ProtocolName} ${row.Trade.Dex.ProtocolVersion}`,
                    },
                    {
                        name: 'Count', cell: row => +row.trades,
                    }
                ],
                options: {
                    height: 375,
                    chartArea: {
                        left: 50,
                        width: '75%',
                    },
                }
            }
        }
    }

    class DEXSmartContracts extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Top Smart Contracts by DEX Trade Volume on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'DEXSmartContracts',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Smart Contract', cell: row=>row.Trade.Dex.SmartContract,
                        rendering: renderJustAddressLink
                    },
                    {
                        name: 'Protocol', cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Trades', cell: row => row.trades,
                    },
                    {
                        name: 'Currencies', cell: row => row.currencies,
                    },
                    {
                        name: 'Contracts', cell: row => row.contracts,
                    },
                ]
            }
        }
    }
    const variables = {
        network: '<%= @streaming%>',
    };

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[CountOfDEXTradesByProtocol, '#CountOfDEXTradesByProtocol']], 'Count-of-DEX-Trades-By-Protocol_9', variables);
        renderComponent('<%=@streaming_access_token %>', [[DEXSmartContractProtocols, '#DEXSmartContractProtocols'], [DEXSmartContractProtocolsPie, '#DEXSmartContractProtocolsPie']], 'DEX-Smart-Contract-Protocols_3', variables);
        renderComponent('<%=@streaming_access_token %>', [ [DEXSmartContracts, '#DEXSmartContracts']], 'DEX-Smart-Contracts_4', variables);
    })
</script>
