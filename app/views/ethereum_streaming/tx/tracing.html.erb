<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='EventsAndCallsByTXHash' class='card'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class=" custom-control custom-checkbox custom-control-inline" id="DisplayFromToCheckbox">
      <input class="custom-control-input" type="checkbox" value="Show From-To" id="fromToCheckbox" checked>
      <label class="custom-control-label" for="fromToCheckbox" style="color: #2B7CE9;">
        Transfers
      </label>
    </div>
    <div class=" custom-control custom-checkbox custom-control-inline" id="DisplayMoneyFlowCheckbox">
      <input class="custom-control-input" type="checkbox" value="Show Money Flow" id="moneyFlowCheckbox" checked>
      <label class="custom-control-label" for="moneyFlowCheckbox" style="color: #00ff00;">
        Calls
      </label>
    </div>
    <div id='GraphTX' class='card'></div>
  </div>
</div>

<script type="module">
    class EventsAndCallsByTXHash extends TreeComponent {
        configuration() {
            return {
                topElement: response => response.EVM,
                chainId: response => response.EVM.Calls[0]?.ChainId || response.EVM.Events[0]?.ChainId || response.EVM.Transfers[0]?.ChainID,
                title: () => 'Decoded EVM Transaction Data and Trace',
                id: 'EventsAndCallsByTXHash',
            }
        }
    }

    class GraphTX extends GraphsComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.Transfers, ...response.EVM.Calls],
                chainId: response => response.EVM.Transfers[0]?.ChainId || response.EVM.Calls[0]?.ChainId,
                title: () => 'Transfers and money flow',
                id: 'GraphTX',
                pairs: [
                    {
                        name: 'Transfers',
                        from: {
                            name: 'Sender',
                            cell: row => row.Transfer?.Sender,
                        },
                        to: {
                            name: 'Receiver',
                            cell: row => row.Transfer?.Receiver,
                        },
                        checkboxId: 'fromToCheckbox',
                        amount: {cell: row => parseFloat(row.Transfer?.Amount).toFixed(5)},
                        edgeLabel: {
                            cell: row => `${parseFloat(row.Transfer?.Amount).toFixed(5)}  ${row.Transfer?.Currency.Symbol}`
                        },
                        color: {
                            color: '#2B7CE9',
                            highlight: '#2B7CE9',
                            hover: '#2B7CE9',
                            inherit: false,
                            opacity: 1.0
                        },
                    },
                    {
                        name: 'Calls',
                        from: {
                            name: 'CallFrom',
                            cell: row => row.Call?.From,
                        },
                        to: {
                            name: 'CallTo',
                            cell: row => row.Call?.To,

                        },
                        checkboxId: 'moneyFlowCheckbox',
                        edgeLabel: {
                            cell: row => row.Call?.Signature?.Name || row.Call?.Signature?.SignatureHash || ''
                        },
                        color: {
                            color: '#00ff00',
                            highlight: '#00ff00',
                            hover: '#00ff00',
                            inherit: false,
                            opacity: 1.0
                        },
                    },
                ],
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        hash: '<%= @hash%>',
    };
    renderComponent('<%=@streaming_access_token %>', [[EventsAndCallsByTXHash, '#EventsAndCallsByTXHash'], [GraphTX, '#GraphTX']], 'Internal-Calls-Flow', variables);

</script>
