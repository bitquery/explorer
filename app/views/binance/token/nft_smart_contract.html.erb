<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='NFTTokenInformation' class='card'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='PopularTokenIDsNFT' class='card'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='TopNFTHolders'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='TopNFTHoldersPie'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubscriptionLatestTradesNFTToken' class='card'></div>
  </div>
</div>
<script type="module">
    class NFTTokenInformation extends BootstrapVerticalTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.BalanceUpdates,
                chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.BalanceUpdates[0]?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.BalanceUpdates[0]?.Currency?.Symbol
                    return `Latest ${tokenName} ${tokenSymbol} NFT Token info`
                },
                id: 'NFTTokenInformation',
                columns: [
                    {
                        name: 'Name', cell: row => row.Currency.Name
                    },
                    {
                        name: 'Symbol', cell: row => row.Currency.Symbol
                    },
                    {
                        name: 'Unique IDs', cell: row => row.ids
                    },
                    {
                        name: 'Unique Holders', cell: row => row.holders
                    },
                    {
                        name: 'Transfers', cell: row => (row.updates) / 2
                    },
                    {
                        name: 'First transfer', cell: row => row.Block.first,
                        rendering: renderDate,
                    },
                    {
                        name: 'Last transfer', cell: row => row.Block.last,
                        rendering: renderDate,
                    },
                ]
            }
        }
    }

    class PopularTokenIDsNFT extends BootstrapCardComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol})` : ''
                    return `Most popular ${tokenName} ${tokenSymbol} NFTs based on transfer count`
                },
                id: 'PopularTokenIDsNFT',
                image: [
                    {
                        cell: row => row.Transfer.URI, rendering: renderImgFromURI,
                    }
                ],
                columns: [
                    {
                        name: 'ID', cell: row => ({id: row.Transfer.Id, address: row.Transfer.Currency.SmartContract}),
                        rendering: renderIdLink
                    },
                    {
                        name: 'Transfers Count', cell: row => row.count,
                    },
                    {
                        name: 'Unique Receivers', cell: row => row.receivers,
                    },
                    {
                        name: 'Last Receiver', cell: row => row.Transfer.last_receiver,
                        rendering: renderJustAddressLink
                    },
                ]
            }
        }
    }

    class TopNFTHolders extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.BalanceUpdates,
                chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.BalanceUpdates[0]?.Currency?.Name || '-'
                    const tokenSymbol = response.EVM.BalanceUpdates[0]?.Currency?.Symbol ? `(${response.EVM.BalanceUpdates[0]?.Currency?.Symbol})` : ''
                    return `Top ${tokenName} ${tokenSymbol} NFT Holders`
                },
                id: 'TopNFTHolders',
                columns: [
                    {
                        name: 'Address', cell: row => row.BalanceUpdate.Address,
                        rendering: renderJustAddressLink, headerStyle: {width: '40%'}
                    },
                    {
                        name: 'Balance', cell: row => row.balance,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '100px'},
                    },
                    {
                        name: 'Unique Ids Owned Lifetime', cell: row => row.ids,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    class TopNFTHoldersPie extends PieChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.BalanceUpdates,
                chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.BalanceUpdates[0]?.Currency?.Name || '-'
                    const tokenSymbol = response.EVM.BalanceUpdates[0]?.Currency?.Symbol ? `(${response.EVM.BalanceUpdates[0]?.Currency?.Symbol})` : ''
                    return `Richest ${tokenName} ${tokenSymbol} NFT Holders`
                },
                id: 'TopNFTHoldersPie',
                columns: [
                    {
                        name: 'Address', cell: row => row.BalanceUpdate.Address,
                        headerStyle: {width: '45%'}
                    },
                    {
                        name: 'Count', cell: row => +row.balance,
                    }
                ],
                options: {
                    title: 'Balance',
                    height: 397
                }
            }
        }
    }

    class SubscriptionLatestTradesNFTToken extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.DEXTrades[0]?.Trade?.Buy?.Currency?.Name || '-'
                    const tokenSymbol = response.EVM.DEXTrades[0]?.Trade?.Buy?.Currency?.Symbol ? `(${response.EVM.DEXTrades[0]?.Trade?.Buy?.Currency?.Symbol})` : ''
                    return `Latest ${tokenName} ${tokenSymbol} NFT Token Trades Stream`
                },
                id: 'SubscriptionLatestTradesNFTToken',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate, headerStyle: {width: '14%'}
                    },
                    {
                        name: 'NFT', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                    },
                    {
                        name: 'Sell currency', cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                    },
                    {
                        name: 'Seller', cell: row => row.Trade.Buy.Seller,
                        rendering: renderJustAddressLink, headerStyle: {width: '20%'}
                    },
                    {
                        name: '', cell: () => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: row => row.Trade.Buy.Buyer,
                        rendering: renderJustAddressLink, headerStyle: {width: '20%'}
                    },
                    {
                        name: 'Price', cell: row => row.Trade.Buy.Price,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Dex', cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Transaction', cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @address %>',
        limit: 10,
        offset: 0,
    }
    renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>',  [[NFTTokenInformation, '#NFTTokenInformation']], 'NFT-Token-Information_3', variables);
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[PopularTokenIDsNFT, '#PopularTokenIDsNFT']], 'Most-popular-NFTs-based-on-transfer-count', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[TopNFTHolders, '#TopNFTHolders'], [TopNFTHoldersPie, '#TopNFTHoldersPie']], 'Top-NFT-Holders_5', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[SubscriptionLatestTradesNFTToken, '#SubscriptionLatestTradesNFTToken']], 'the-Latest-Trades-of-NFT-Token_2', variables, 'Subscription-for-the-Latest-Trades-of-NFT-Token_3');
    })
</script>
