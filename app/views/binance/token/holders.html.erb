<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='BalanceHolderStatsLatestDate'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='TopHolders'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='HoldersCount'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='GiniIndex'></div>
  </div>
</div>
<div class='row mb-4'>
  <div class='col-12 col-xl-6'>
    <div class='card' id='NakamotoIndex'></div>
  </div>
  <div class='col-12 col-xl-6'>
    <div class='card' id='SupplyTokens'></div>
  </div>
</div>
<script type="module">
    class BalanceHolderStatsLatestDate extends BootstrapVerticalTableComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.date3],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.date3[0]?.Currency.Name || ''
                    const tokenSymbol = response.EVM.date3[0]?.Currency.Symbol ? `(${response.EVM.date3[0]?.Currency.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Token Holder Stats`
                },
                id: 'BalanceHolderStatsLatestDate',
                columns: [
                    {
                        name: 'Date', cell: row => row.BalanceUpdate.LastDate
                    },
                    {
                        name: 'Holder Count', cell: row => row.count
                    },
                    {
                        name: 'Gini Factor', cell: row => row.gini
                    },
                    {
                        name: 'Nakamoto Index', cell: row => row.nakamoto
                    },
                    {
                        name: 'Total Supply', cell: row => row.supply
                    },
                ]
            }
        }
    }

    class TopHolders extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.TokenHolders],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.TokenHolders[0]?.Currency?.Name || '-'
                    const tokenSymbol = response.EVM.TokenHolders[0]?.Currency?.Symbol ? `(${response.EVM.TokenHolders[0]?.Currency?.Symbol})` : ''
                    return `Top ${tokenName} ${tokenSymbol} Token Holders`
                },
                id: 'TopHolders',
                columns: [
                    {
                        name: 'Holder', cell: row => row.Holder.Address,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Amount', cell: row => row.Balance.Amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end', width: '35%'},
                    },
                ]
            }
        }
    }

    class HoldersCount extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol ? `(${response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Token holders count`
                },
                id: 'HoldersCount',
                columns: [
                    {
                        name: 'Date', cell: row => row.BalanceUpdate.LastDate
                    },
                    {
                        name: 'Count', cell: row => +row.count
                    }
                ],
                options: {
                    height: 300,
                    vAxis: {minValue: 0},
                    legend: {position: 'top'},
                    theme: 'material'
                }
            }
        }
    }

    class GiniIndex extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.date1[0]?.Currency.Name || response.EVM.date2[0]?.Currency.Name || response.EVM.date3[0]?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.date1[0]?.Currency.Symbol || response.EVM.date2[0]?.Currency.Symbol || response.EVM.date3[0]?.Currency?.Symbol ? `(${response.EVM.date1[0]?.Currency.Symbol || response.EVM.date2[0]?.Currency.Symbol || response.EVM.date3[0]?.Currency?.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Gini Factor`
                },
                id: 'GiniIndex',
                columns: [
                    {
                        name: 'Date', cell: row => row.BalanceUpdate.LastDate
                    },
                    {
                        name: 'Gini', cell: row => +row.gini
                    }
                ],
                options: {
                    height: 300,
                    legend: {position: 'top'},
                    theme: 'material'

                }
            }
        }
    }

    class NakamotoIndex extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol ? `(${response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Nakamoto Index`
                },
                id: 'NakamotoIndex',
                columns: [
                    {
                        name: 'Date', cell: row => row.BalanceUpdate.LastDate
                    },
                    {
                        name: 'Nakamoto', cell: row => +row.nakamoto
                    }
                ],
                options: {
                    height: 300,
                    legend: {position: 'top'},
                    theme: 'material'
                }
            }
        }
    }

    class SupplyTokens extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => [...response.EVM.date1, ...response.EVM.date2, ...response.EVM.date3],
                chainId: response => response.EVM.Blocks[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.date1[0]?.Currency?.Name || response.EVM.date2[0]?.Currency?.Name || response.EVM.date3[0]?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol ? `(${response.EVM.date1[0]?.Currency?.Symbol || response.EVM.date2[0]?.Currency?.Symbol || response.EVM.date3[0]?.Currency?.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Total Supply`
                },
                id: 'SupplyTokens',
                columns: [
                    {
                        name: 'Date', cell: row => row.BalanceUpdate.LastDate
                    },
                    {
                        name: 'Supply', cell: row => +row.supply
                    }
                ],
                options: {
                    height: 300,
                    vAxis: {minValue: 0},
                    legend: {position: 'top'},
                    theme: 'material'
                }
            }
        }
    }

    const variables = {
        network: '<%= @streaming %>',
        token: '<%= @address %>',
        till_now: new Date().toISOString().slice(0, 10),
        till: new Date().toISOString().slice(0, 10)
    };
    variables.from = new Date(new Date().setMonth(new Date().getMonth() - 3)).toISOString().slice(0, 10);
    variables.date_middle = new Date((new Date(variables.from).getTime() + new Date(variables.till).getTime()) / 2).toISOString().slice(0, 10);


    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[HoldersCount, '#HoldersCount'], [GiniIndex, '#GiniIndex'], [NakamotoIndex, '#NakamotoIndex'], [SupplyTokens, '#SupplyTokens'], [BalanceHolderStatsLatestDate, '#BalanceHolderStatsLatestDate']], 'Balance-holder-stats_8', variables);
    })
    renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[TopHolders, '#TopHolders']], 'Top-holders_6', variables);
</script>
