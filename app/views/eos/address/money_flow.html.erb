<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header">
        <div class="d-inline-flex align-items-center">
          <div class="choice-view">
            <input class="choice-view__radio" type="radio" name="view" id="graph-radio" value="graph" onclick="$('#graph').parents('.card-body').show();$('#sankey-graph').parents('.card-body').hide()" checked>
            <label class="choice-view__label" for="graph-radio">Graph</label>
          </div>
          <div class="choice-view">
            <input class="choice-view__radio" type="radio" name="view" id="sankey-radio" value="sankey" onclick="$('#sankey-graph').parents('.card-body').show();$('#graph').parents('.card-body').hide()">
            <label class="choice-view__label" for="sankey-radio">Sankey</label>
          </div>
          <div class="choice-view">
            <a class="btn btn-primary" href="https://lite.bitquery.io/?chain=<%= j params[:network][:network] %>&address=<%= j @address %>" target="_blank">Try MoneyFlow Lite</a>
          </div>
        </div>
      </div>
      <div class="card-body" style="padding: 0">
        <div id="graph" style="width: 100%;"></div>
      </div>
      <div class="card-body" style="padding: 0; display: none;">
        <div id="sankey-graph" style="width: 100%;"></div>
      </div>
    </div>
  </div>
</div>
<script type="module">
  document.addEventListener("DOMContentLoaded", function() {
    const query = new graphs.query(`
      query (
        $address: String!,
        $inboundDepth: Int!,
        $outboundDepth: Int!,
        $limit: Int!,
        $currency: String!,
        $from: ISO8601DateTime,
        $till: ISO8601DateTime
      ) {
        eos {
          inbound: coinpath(
            initialAddress: { is: $address },
            currency: { is: $currency },
            depth: { lteq: $inboundDepth },
            options: { direction: inbound, asc: "depth", desc: "amount", limitBy: { each: "depth", limit: $limit } },
            date: { since: $from, till: $till }
          ) {
            sender {
              address
              annotation
              smartContract {
                contractType
                currency {
                  symbol
                  name
                }
              }
            }
            receiver {
              address
              annotation
              smartContract {
                contractType
                currency {
                  symbol
                  name
                }
              }
            }
            amount
            currency {
              symbol
            }
            depth
            count
          }
          outbound: coinpath(
            initialAddress: { is: $address },
            currency: { is: $currency },
            depth: { lteq: $outboundDepth },
            options: { asc: "depth", desc: "amount", limitBy: { each: "depth", limit: $limit } },
            date: { since: $from, till: $till }
          ) {
            sender {
              address
              annotation
              smartContract {
                contractType
                currency {
                  symbol
                  name
                }
              }
            }
            receiver {
              address
              annotation
              smartContract {
                contractType
                currency {
                  symbol
                  name
                }
              }
            }
            amount
            currency {
              symbol
            }
            depth
            count
          }
        }
      }
    `);
    const currencies = <%= raw @currencies.map { |cur| { address: cur.address, symbol: cur.symbol, name: cur.name, search: cur.address } }.to_json %>;
    new graphs.address_graph('#graph', query, {
      theme: '<%= @theme %>'
    });
    new graphs.addControls('#graph', query, {
      theme: '<%= @theme %>',
      currencies: currencies
    });
    new graphs.address_sankey('#sankey-graph', query, {
      theme: '<%= @theme %>'
    });
    new graphs.addControls('#sankey-graph', query, {
      theme: '<%= @theme %>',
      currencies: currencies
    });
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';
    queryWithTimeRange(rr, query, fromDate, tillDate, {
      inboundDepth: 1,
      outboundDepth: 1,
      limit: 10,
      network: '<%= j params[:network][:network] %>',
      address: '<%= j @address %>',
      currency: '<%= j @currencies.first && @currencies.first.address %>'
    });
  });
</script>
