<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='TradesByPairs' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>

<script type="module">
    class TradesByPairs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Trades by Pairs on ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TradesByPairs',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Pair',
                        cell: row => ({
                            buyCurrencySymbol: row.Trade.Buy.Currency.Symbol,
                            buyCurrencySC: row.Trade.Buy.Currency.SmartContract,
                            sellCurrencySymbol: row.Trade.Sell.Currency.Symbol,
                            sellCurrencySC: row.Trade.Sell.Currency.SmartContract,
                        }),
                        rendering: renderPairLink,
                    },
                    {
                        name: 'Trades',
                        cell: row => row.count,
                        headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Buy Amount',
                        cell: row => ({amount: row.buy_amount, usd: row.buy_amount_usd}),
                        rendering: renderNumberWithUSD,
                        headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Mdn Buy Price',
                        cell: row => ({amount: row.buy_price, usd: row.buy_price_usd}),
                        rendering: renderNumberWithUSD,
                        headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: '',
                        cell: row => '',
                        rendering: renderSenderRecieverIcon,
                        headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Sell Amount',
                        cell: row => ({amount: row.sell_amount, usd: row.sell_amount_usd}),
                        rendering: renderNumberWithUSD,
                        headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Mdn Sell Price',
                        cell: row => ({amount: row.sell_price, usd: row.sell_price_usd}),
                        rendering: renderNumberWithUSD,
                        headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Started',
                        cell: row => row.Block.Date,
                        rendering: renderDate,
                        headerStyle: {width: '120px'},
                    },
                    {
                        name: 'Days traded',
                        cell: row => row.uniq,
                        rendering: renderNumbers,
                        headerStyle: {textAlign: 'end', width: '100px'},
                    },
                ]
            }
        }
    }


    const variables = {
        network: '<%= @streaming%>',
        protocol: '<%= @protocol%>',
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate, tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[TradesByPairs, '#TradesByPairs']], 'Token-Trade-Pairs-bu-Protocol_2', variables);
    });
</script>