<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='AddressHoldingNFT'>
          <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='OutcomingNFTTransfersByAddress'>
          <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='IncomingNFTTransfersByAddress'>
          <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='TradesNFTTokenAddressSeller'>
          <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='TradesNFTTokenAddressBuyer'>
          <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<script type="module">
    class AddressHoldingNFT extends BootstrapCardComponent {
        configuration() {
            return {
                topElement: response => response.EVM.BalanceUpdates,
                chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                title: () => 'Address Holding NFTs',
                id: 'AddressHoldingNFT',
                theme: '<%= @theme %>',
                image: [
                    {
                        cell: row => row.BalanceUpdate.URI,
                        rendering: renderImgFromURI,
                    }
                ],
                columns: [
                    {
                        name: 'NFT',
                        cell: row => ({currency: row.Currency.Symbol, smartContract: row.Currency.SmartContract}),
                        rendering: renderTokenLink,
                    },
                    {
                        name: 'ID', cell: row => ({id: row.BalanceUpdate.Id, address: row.Currency.SmartContract}),
                        rendering: renderIdLink
                    },
                    {
                        name: 'Last Transaction', cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                    },
                    {
                        name: 'Amount', cell: row => row.amount
                    },
                ]
            }
        }
    }

    class OutcomingNFTTransfersByAddress extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: () => 'Outcoming NFT Transfers By Address',
                id: 'OutcomingNFTTransfersByAddress',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'ID', cell: row => ({id: row.Transfer.Id, address: row.Transfer.Currency.SmartContract}),
                        rendering: renderIdLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Sender', cell: row => row.Transfer.Sender,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: row => '',
                        rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'TX', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }

    class IncomingNFTTransfersByAddress extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: () => 'Incoming NFT Transfers By Address',
                id: 'IncomingNFTTransfersByAddress',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'ID', cell: row => ({id: row.Transfer.Id, address: row.Transfer.Currency.SmartContract}),
                        rendering: renderIdLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Sender', cell: row => row.Transfer.Sender,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: row => '',
                        rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'TX', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }

    class TradesNFTTokenAddressSeller extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Trades of NFT Token with Address as Seller',
                id: 'TradesNFTTokenAddressSeller',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Price', cell: row => ({amount:row.Trade.Sell.Price, usd:row.Trade.Sell.PriceInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},

                    },
                    {
                        name: 'Amount', cell: row => row.Trade.Sell.Amount,
                        rendering: renderNumbersWithCurrency, headerStyle: {textAlign: 'end'},
                    },

                    {
                        name: 'Seller', cell: row => row.Trade.Sell.Seller,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: row => '',
                        rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: row => row.Trade.Sell.Buyer,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'TX', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }

    class TradesNFTTokenAddressBuyer extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => 'Trades of NFT Token with Address as Buyer',
                id: 'TradesNFTTokenAddressBuyer',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Price', cell: row => ({amount:row.Trade.Buy.Price, usd:row.Trade.Buy.PriceInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Amount', cell: row => row.Trade.Buy.Amount,
                        rendering: renderNumbersWithCurrency, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Seller', cell: row => row.Trade.Buy.Seller,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: row => '',
                        rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: row => row.Trade.Buy.Buyer,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'TX', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        address: '<%= @address %>',
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[AddressHoldingNFT, '#AddressHoldingNFT']], 'Address-Holding-NFTs_5', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[OutcomingNFTTransfersByAddress, '#OutcomingNFTTransfersByAddress']], 'Outcoming-NFT-Transfers-By-Address_3', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[IncomingNFTTransfersByAddress, '#IncomingNFTTransfersByAddress']], 'Incoming-NFT-Transfers-By-Address_3', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[TradesNFTTokenAddressSeller, '#TradesNFTTokenAddressSeller']], 'Trades-of-NFT-Token-with-Address-as-Seller_4', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[TradesNFTTokenAddressBuyer, '#TradesNFTTokenAddressBuyer']], 'Trades-of-NFT-Token-with-Address-as-Buyer_4', variables);
    })
</script>
