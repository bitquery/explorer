<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='LatestTransfersOfTokenInNetwork' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TokenTransfers'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TokenTransfersAmount'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<script type="module">
    class LatestTransfersOfTokenInNetwork extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol})` : ''
                    return `Latest ${tokenName} ${tokenSymbol} Token Transfer Stream`
                },
                id: 'LatestTransfersOfTokenInNetwork',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink, headerStyle: {width: '120px'},
                    },
                    {
                        name: 'Sender', cell: row => row.Transfer.Sender,
                        rendering: renderJustAddressLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: '', cell: row => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink, headerStyle: {width: '15%'},
                    },
                    {
                        name: 'Currency', cell: row => ({
                            currency: row.Transfer.Currency.Symbol,
                            smartContract: row.Transfer.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Id', cell: row => ({id: row.Transfer.Id, address: row.Transfer.Currency.SmartContract}),
                        rendering: renderIdLink, headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Amount', cell: row => ({amount: row.Transfer.Amount, usd: row.Transfer.AmountInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Hash',
                        cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '120px'},
                    }
                ]
            }
        }
    }

    class TokenTransfers extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Transfer Count`
                },
                id: 'TokenTransfers',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date
                    },
                    {
                        name: 'Transfer Count', cell: row => +row.count
                    },
                ],
                options: {
                    vAxis: {minValue: 0},
                    theme: 'material',
                    legend: {position: 'top'}
                }
            }
        }
    }

    class TokenTransfersAmount extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency?.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency?.Symbol})` : ''
                    return ` ${tokenName} ${tokenSymbol} Transfer Amount`
                },
                id: 'TokenTransfersAmount',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date
                    },
                    {
                        name: 'Transfer Amount', cell: row => +row.amount
                    },
                ],
                options: {
                    colors: ['28A745'],
                    theme: 'material',
                    legend: {position: 'top'}
                }
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @token%>' === 'ETH' ? '0x' : '<%= @token%>',
    }

        renderComponent('<%=@streaming_access_token %>', '<%=@use_eap %>', [[LatestTransfersOfTokenInNetwork, '#LatestTransfersOfTokenInNetwork']], 'Latest-Transfers-of-Token0_4', variables, 'Subscription-Latest-Transfers-of-Token_3');
        renderComponent('<%=@streaming_access_token %>', '<%=@use_eap %>', [[TokenTransfers, '#TokenTransfers'], [TokenTransfersAmount, '#TokenTransfersAmount']], 'Token-Transfers_8', variables);
</script>
