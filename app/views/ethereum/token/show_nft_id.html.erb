<div class='row'>
  <div class='col-12 col-xl-5 mb-4'>
    <div class='card' id='LatestNFTTransfersTable'></div>
  </div>
  <div class='col-12 col-xl-7 mb-4'>
    <div class='card' id='IdNFTTransfersTable'></div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='IdNFTTransfersGraph' class='card'></div>
  </div>
</div>
<script type="module">
    class LatestNFTTransfersTable extends BootstrapVerticalTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.BalanceUpdates,
                chainId: response => response.EVM.BalanceUpdates[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.Transfers[0]?.Transfer?.Currency.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Information By ID`
                },
                id: 'LatestNFTTransfersTable',
                columns: [
                    {
                        name: 'Image', cell: row => row.BalanceUpdate.URI,
                        rendering: renderImgFromURI,
                    },
                    {
                        name: 'Name', cell: row => row.Currency.Name
                    },
                    {
                        name: 'Currency',
                        cell: row => ({currency: row.Currency.Symbol, smartContract: row.Currency.SmartContract}),
                        rendering: renderTokenLink,
                    },
                    {
                        name: 'Id', cell: row => ({id: row.BalanceUpdate.Id, address: row.Currency.SmartContract}),
                        rendering: renderIdLink
                    },
                    {
                        name: 'Last owner', cell: row => row.BalanceUpdate.Address,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Received in TX', cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                    },
                ]
            }
        }
    }

    class IdNFTTransfersTable extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer?.Currency.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Transfers List By Id`
                },
                id: 'IdNFTTransfersTable',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block', cell: row => row.Block.Number,
                        rendering: renderBlockLink,
                    },
                    {
                        name: 'Sender', cell: row => row.Transfer.Sender,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: () => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Receiver', cell: row => row.Transfer.Receiver,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'TX Hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Amount', cell: row =>({number:row.Transfer.Amount, symbol:row.Transfer?.Currency.Symbol }) ,
                        rendering: renderNumbersWithCurrencySymbol, headerStyle: {textAlign: 'end', width: '80px'},
                    }
                ]
            }
        }
    }

    class IdNFTTransfersGraph extends GraphsComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.token_info[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.token_info[0]?.Transfer?.Currency.Symbol ? `(${response.EVM.token_info[0]?.Transfer?.Currency.Symbol})` : ''
                    return `${tokenName} ${tokenSymbol} Transfers`
                },
                id: 'IdNFTTransfersGraph',
                pairs: [
                    {
                        name: 'Transfers',
                        from: {
                            name: 'Sender',
                            cell: row => row.Transfer.Sender,
                            rendering: renderJustAddressLink
                        },
                        to: {
                            name: 'Receiver',
                            cell: row => row.Transfer.Receiver,
                            rendering: renderJustAddressLink
                        },
                        checkboxId: null,
                        edgeLabel: {
                            cell: row => row.Block.Time,
                            rendering: renderDate
                        },
                        color: {
                            color: '#2B7CE9',
                            highlight: '#2B7CE9',
                            hover: '#2B7CE9',
                            inherit: false,
                            opacity: 1.0
                        },
                    },
                ],
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @token %>',
        id: '<%= @id %>',
    }
    renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[LatestNFTTransfersTable, '#LatestNFTTransfersTable']], 'NFT-Token-Information-By-ID_6', variables);
    renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[IdNFTTransfersGraph, '#IdNFTTransfersGraph'], [IdNFTTransfersTable, '#IdNFTTransfersTable']], 'NFT-Transfers-List-By-Id_5', variables);

</script>
