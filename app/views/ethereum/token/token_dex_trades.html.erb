<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card'>
      <div id='LatestTradesOfTokenInNetwork'>
        <div class="placeholder-container">
          <div class="placeholder-row"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card'>
      <div id='TokenPairs'>
        <div class="placeholder-container">
          <div class="placeholder-row"></div>
        </div>
      </div>
    </div>
  </div>
</div>
<script type="module">
    class LatestTradesOfTokenInNetwork extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTradeByTokens,
                chainId: response => response.EVM.DEXTradeByTokens[0]?.ChainId,
                title: response => {
                    const tokenName = response.EVM.DEXTradeByTokens[0]?.Trade.Currency.Name || ''
                    const tokenSymbol = response.EVM.DEXTradeByTokens[0]?.Trade.Currency.Symbol || '-'
                    return `Latest Trades of ${tokenName} in ${tokenSymbol}`
                },
                id: 'LatestTradesOfTokenInNetwork',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Timestamp',
                        cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block',
                        cell: row => row.Block.Number,
                        rendering: renderBlockLink,
                        headerStyle: { width: '96px' },
                    },
                    {
                        name: 'Hash',
                        cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                    },
                    {
                        name: 'Seller',
                        cell: row => row.Trade.Seller,
                        rendering: renderJustAddressLink
                    },
                    {
                        name: 'Sell Amount',
                        cell: row => ({
                            amount: row.Trade.Amount,
                            usd: row.Trade.AmountInUSD
                        }),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end' },
                    },
                    {
                        name: 'Sell Currency',
                        cell: row => ({
                            currency: row.Trade.Currency.Symbol,
                            smartContract: row.Trade.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                    },
                    {
                        name: '',
                        cell: () => '',
                        rendering: renderSenderRecieverIcon,
                        headerStyle: { width: '50px' },
                    },
                    {
                        name: 'Buyer',
                        cell: row => row.Trade.Buyer,
                        rendering: renderJustAddressLink
                    },
                    {
                        name: 'Buy Amount',
                        cell: row => ({
                            amount: row.Trade.Side.Amount,
                            usd: row.Trade.Side.AmountInUSD
                        }),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end' },
                    },
                    {
                        name: 'Buy Currency',
                        cell: row => ({
                            currency: row.Trade.Side.Currency.Symbol,
                            smartContract: row.Trade.Side.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                        headerStyle: { width: '110px' },
                    },
                    {
                        name: 'Price',
                        cell: row => ({amount:row.Trade.Price, usd:row.Trade.PriceInUSD}),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end' },
                    },
                    {
                        name: 'Price Asymmetry',
                        cell: row => row.Trade.PriceAsymmetry,
                        rendering: renderNumbers,
                        headerStyle: { textAlign: 'end' },
                    }
                ],

            }
        }
    }

    class TokenPairs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTradeByTokens,
                chainId: response => response.EVM.DEXTradeByTokens[0]?.ChainId,
                title: () => 'Token Pairs by Count',
                id: 'TokenPairs',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Pair', cell: row => ({
                            buyCurrencySymbol: row.Trade.Currency.Symbol,
                            buyCurrencySC: row.Trade.Currency.SmartContract,
                            sellCurrencySymbol: row.Trade.Side.Currency.Symbol,
                            sellCurrencySC: row.Trade.Side.Currency.SmartContract,
                        }),
                        rendering: renderPairLink,
                    },
                    {
                        name: 'Name', cell: row => row.Trade.Side.Currency.Name
                    },
                    {
                        name: 'Address', cell: row => row.Trade.Side.Currency.SmartContract,
                        rendering: renderJustAddressLink, headerStyle: {width: '40%'},
                    },
                    {
                        name: 'Count', cell: row => row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @address %>',
        limit: 10,
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[LatestTradesOfTokenInNetwork, '#LatestTradesOfTokenInNetwork']], 'Latest-Trades-of-Token-in-Network_dextrades_10', variables, 'Subscription-latest-Trades-of-Token_dextrades_4');
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[TokenPairs, '#TokenPairs']], 'Token-pairs_5', variables);
    })
</script>
