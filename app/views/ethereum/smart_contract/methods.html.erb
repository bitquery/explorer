<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='SmartContractCount'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='SmartContractMethods'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div class='card' id='AddressesUsedInMethodParameters'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<script type="module">
    class SmartContractCount extends BarChartComponent {
        configuration() {
            return {
                topElement: response=> response.EVM.Calls,
                chainId: response=>response.EVM.Calls[0].ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer.Currency.Symboll? `(${response.EVM.Transfers[0]?.Transfer.Currency.Symbol})`:''
                    return `Largest ${tokenName} ${tokenSymbol} Senders`
                },
                id: 'SmartContractCount',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Method', cell: row => row.Call.Signature.Signature,
                    },
                    {
                        name: 'Calls Count', cell: row => +row.count
                    },
                ],
                options: {
                    theme: 'material',
                    legend: {position: 'top'},
                    bar: {groupWidth: "90%"},
                    height: 300,
                }
            }
        }
    }
    class SmartContractMethods extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response=> response.EVM.Calls,
                chainId: response=>response.EVM.Calls[0].ChainId,
                title: response => {
                    const tokenName = response.EVM.Transfers[0]?.Transfer?.Currency.Name || ''
                    const tokenSymbol = response.EVM.Transfers[0]?.Transfer?.Currency.Symbol? `(${response.EVM.Transfers[0]?.Transfer?.Currency.Symbol})`:''
                    return `${tokenName} ${tokenSymbol} Methods`
                },
                id:'SmartContractMethods',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Method', cell: row=> ({
                                method: row.Call.Signature.Name,
                                hash: row.Call.Signature.SignatureHash,
                                value: row.Call.Value
                            }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Method signature', cell: row=> row.Call.Signature.Signature,
                    },
                    {
                        name: 'Gas Cost/Call',
                        cell: row =>({amount:row.average, usd: row.average_usd}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'},
                    },
                    {
                        name: 'Latest Date', cell: row=> row.Block.Date
                    },
                    {
                        name: 'TX Sender', cell: row=> row.txs,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width: '112px'},
                    },
                    {
                        name: 'Internal calls', cell: row=> row.internal_count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width: '112px'},
                    },
                    {
                        name: 'External calls', cell: row=> row.external_count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width: '112px'},
                    },
                    {
                        name: 'Calls Count', cell: row=> row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end',width: '100px'},
                    },
                ]
            }
        }
    }

    class AddressesUsedInMethodParameters extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response=> response.EVM.Calls,
                chainId: response=>response.EVM.Calls[0].ChainId,
                title:()=>'Addresses used in Method Parameters',
                id:'AddressesUsedInMethodParameters',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Address', cell: row=> row.Call.From,
                        rendering: renderJustAddressLink, headerStyle: {width: '44%'},
                    },
                    {
                     name: 'Arguments', cell: row => row.Arguments.map(e => e.Name).join(', ')
                    },
                    {
                        name: 'Method', cell: row=> ({
                                method: row.Call.Signature.Name,
                                hash: row.Call.Signature.SignatureHash,
                                value: row.Call.Value
                            }),
                        rendering: renderMethodLink,
                    },
                    {
                        name: 'Calls Count', cell: row=> row.count,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    const variables = {
        network: '<%= @streaming%>',
        token: '<%= @address %>',
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>',[[SmartContractMethods, '#SmartContractMethods'],[SmartContractCount, '#SmartContractCount']], 'Smart-Contract-Methods_6', variables);
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>',[[AddressesUsedInMethodParameters, '#AddressesUsedInMethodParameters']], 'Addresses-used-in-Method-Parameters_4', variables);
    })
</script>
