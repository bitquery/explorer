<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='NFTTransfersByDate' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-7  mb-4'>
    <div class='card' id='TopTransferNFT'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-5  mb-4'>
    <div class='card' id='NFTTransfersByDatePie'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='NFTTokenTradesByDate' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-7  mb-4'>
    <div class='card' id='TopTradedNFTTokens'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-5  mb-4'>
    <div class='card' id='TopTradedNFTTokensPie'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row '>
  <div class='col-12 col-xl-7 mb-4'>
    <div class='card' id='TopExchangesForNFTs'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-5 mb-4'>
    <div class='card' id='TopExchangesForNFTsPie'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='LatestTradesNFTToken' class='card '>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>

<script type="module">
    class NFTTransfersByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => `Daily Count of NFT Transfers on ${WidgetConfig.getName(response.EVM.Transfers[0]?.ChainId) || 'network'}`,
                theme: '<%= @theme %>',
                id: 'NFTTransfersByDate',
                columns: [
                    {
                        name: 'Date',
                        cell: row => row.Block.Date
                    },
                    {
                        name: 'Count',
                        cell: row => +row.count
                    }
                ],
                options: {
                    theme: 'material',
                }
            }
        }
    }

    class TopTransferNFT extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => `Top NFT Collections by Transfer Activity on the  ${WidgetConfig.getName(response.EVM.Transfers[0]?.ChainId) || 'network'}`,
                id: 'TopTransferNFT',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'NFT',
                        cell: row => ({
                            currency: row.Transfer.Currency.Symbol,
                            smartContract: row.Transfer.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '30%'},
                    },
                    {
                        name: 'Transfers',
                        cell: row => row.count,
                    },
                    {
                        name: 'Unq Senders',
                        cell: row => row.senders,
                    },
                    {
                        name: '', cell: () => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'}
                    },
                    {
                        name: 'Unq Receivers',
                        cell: row => row.receivers,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'},
                    },
                ]
            }
        }
    }

    class NFTTransfersByDatePie extends PieChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.Transfers,
                chainId: response => response.EVM.Transfers[0]?.ChainId,
                title: response => `Share of Top NFT Collections in Total Transfers on the ${WidgetConfig.getName(response.EVM.Transfers[0]?.ChainId) || 'network'}`,
                id: 'NFTTransfersByDatePie',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'NFT',
                        cell: row => row.Transfer.Currency.Symbol || row.Transfer.Currency.SmartContract,
                    },
                    {
                        name: 'Count',
                        cell: row => +row.count,
                    }
                ],
                options: {
                    height: 347,
                    chartArea: {
                        left: 30,
                        width: '85%',
                    },
                }
            }
        }
    }

    class NFTTokenTradesByDate extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Daily NFT Trades by Marketplace on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'NFTTokenTradesByDate',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date
                    },
                    {
                        name: row => `${row.Trade.Dex.ProtocolFamily} ${row.Trade.Dex.ProtocolVersion}`,
                        cell: row => +row.count
                    },
                ],
                options: {
                    isStacked: true,
                    theme: 'material',
                }
            }
        }
    }

    class TopTradedNFTTokens extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Top NFT Trades by Volume and Price on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TopTradedNFTTokens',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'NFT', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '120px'},
                    },

                    {
                        name: 'Trades', cell: row => row.count
                    },

                    {
                        name: 'Bought Amount', cell: row => row.buy_amount,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Pair', cell: row => ({
                            buyCurrencySymbol: row.Trade.Buy.Currency.Symbol,
                            buyCurrencySC: row.Trade.Buy.Currency.SmartContract,
                            sellCurrencySymbol: row.Trade.Sell.Currency.Symbol,
                            sellCurrencySC: row.Trade.Sell.Currency.SmartContract,
                        }),
                        rendering: renderPairLink,
                    },
                    {
                        name: 'Paid Amount', cell: row => ({
                            amount: row.sell_amount,
                            usd: row.sell_amount_usd,

                        }),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Min Price',
                        cell: row => row.Trade.Buy.min_price,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Max Price', cell: row => row.Trade.Buy.max_price,
                        rendering: renderNumbers, headerStyle: {textAlign: 'end'}
                    },
                ],
                options: {
                    tableLayout: 'auto'
                }
            }
        }
    }

    class TopTradedNFTTokensPie extends PieChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Distribution of NFT Trades by Collection on the ${WidgetConfig.getName(response.EVM?.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TopTradedNFTTokensPie',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'NFT', cell: row => row.Trade.Buy.Currency.Symbol || row.Trade.Buy.Currency.SmartContract,
                    },
                    {
                        name: 'Count', cell: row => +row.count,
                    }
                ],
                options: {
                    title: 'Trades Count',
                    height: 370,
                    chartArea: {
                        left: 50,
                        width: '75%',
                    },
                }
            }
        }
    }

    class TopExchangesForNFTs extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `NFT Trading Activity by Protocol on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TopExchangesForNFTs',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Protocol',
                        cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'Trades', cell: row => row.count,
                    },
                    {
                        name: 'Unq NFTs traded', cell: row => row.nfts,
                    },
                    {
                        name: 'Unq Currencies Paid', cell: row => row.currencies,
                    },
                    {
                        name: 'Unq NFT Buyers', cell: row => row.buyers
                    },
                ]
            }
        }
    }

    class TopExchangesForNFTsPie extends PieChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Market Share of NFT Trading Protocols on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TopExchangesForNFTsPie',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Protocol', cell: row => `${row.Trade.Dex.ProtocolName} ${row.Trade.Dex.ProtocolVersion}`
                    },
                    {
                        name: 'Count', cell: row => +row.count,
                    }
                ],
                options: {
                    height: 180,
                    chartArea: {
                        left: 50,
                        width: '75%',
                    },
                }
            }
        }
    }

    class LatestTradesNFTToken extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Recent NFT Trades on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'LatestTradesNFTToken',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Time', cell: row => row.Block.Time,
                        rendering: renderDate,
                    },

                    {
                        name: 'Seller', cell: row => row.Trade.Buy.Seller,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: '', cell: () => '', rendering: renderSenderRecieverIcon, headerStyle: {width: '50px'},
                    },
                    {
                        name: 'Buyer', cell: row => row.Trade.Buy.Buyer,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'NFT', cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                    },
                    {
                        name: 'ID',
                        cell: row => ({id: row.Trade.Buy.Ids[0], address: row.Trade.Buy.Currency.SmartContract}),
                        rendering: renderIdLink,
                        headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Price', cell: row => ({amount: row.Trade.Buy.Price, usd: row.Trade.Buy.PriceInUSD}),
                        rendering: renderNumberWithUSD, headerStyle: {textAlign: 'end'}
                    },
                    {
                        name: 'Сurrency', cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink, headerStyle: {width: '110px'},
                    },
                    {
                        name: 'Dex', cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink, headerStyle: {width: '100px'},
                    },
                    {
                        name: 'Hash', cell: row => row.Transaction.Hash,
                        rendering: renderTX, headerStyle: {width: '110px'},
                    },
                ]
            }
        }
    }


    const variables = {
        network: '<%= @streaming%>',
        mempool: false,
    }
    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate, tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>', [[NFTTransfersByDate, '#NFTTransfersByDate']], 'NFT-Token-Transfers-By-Date_6', variables);
        renderComponent('<%=@streaming_access_token %>', [[NFTTransfersByDatePie, '#NFTTransfersByDatePie'], [TopTransferNFT, '#TopTransferNFT']], 'Top-Transfered-NFT-in-Network_2', variables);
        renderComponent('<%=@streaming_access_token %>', [[NFTTokenTradesByDate, '#NFTTokenTradesByDate']], 'NFT-Token-Trades-By-Date_9', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopTradedNFTTokens, '#TopTradedNFTTokens'], [TopTradedNFTTokensPie, '#TopTradedNFTTokensPie']], 'Top-Traded-NFT-in-Network_4', variables);
        renderComponent('<%=@streaming_access_token %>', [[TopExchangesForNFTs, '#TopExchangesForNFTs'], [TopExchangesForNFTsPie, '#TopExchangesForNFTsPie']], 'NFT-Marketplace-Data_6', variables);
        renderComponent('<%=@streaming_access_token %>', [[LatestTradesNFTToken, '#LatestTradesNFTToken']], 'Latest-Trades-of-NFT-Tokens-in-Network_7', variables, 'Mempool-Subscription-Latest-Trades-of-NFT-Tokens-in-Network_5');
    })
</script>
