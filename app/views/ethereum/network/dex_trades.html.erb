<div class='row'>
  <div class='col-12 col-lg-12 mb-4'>
    <div id='SubTokenTradesTable' class='card'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeTrades'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeAddress'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>
<div class='row'>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeCurrencies'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
  <div class='col-12 col-xl-6 mb-4'>
    <div class='card' id='TradesByTimeContracts'>
      <div class="placeholder-container">
        <div class="placeholder-row"></div>
      </div>
    </div>
  </div>
</div>

<script type="module">
    class SubTokenTradesTable extends BootstrapTableComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Latest DEX Trades on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'SubTokenTradesTable',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Timestamp',
                        cell: row => row.Block.Time,
                        rendering: renderDate,
                    },
                    {
                        name: 'Block',
                        cell: row => row.Block.Number,
                        rendering: renderBlockLink,
                        headerStyle: { width: '110px' },
                    },
                    {
                        name: 'Sell amount',
                        cell: row => ({amount: row.Trade.Sell.Amount,usd: row.Trade.Sell.AmountInUSD}),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end', width: '108px' },
                    },
                    {
                        name: 'Sell currency',
                        cell: row => ({
                            currency: row.Trade.Sell.Currency.Symbol,
                            smartContract: row.Trade.Sell.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                        headerStyle: { width: '108px' },
                    },
                    {
                        name: '',
                        cell: row => '',
                        rendering: renderSenderRecieverIcon,
                        headerStyle: { width: '50px' },
                    },
                    {
                        name: 'Buy amount',
                        cell: row => ({amount: row.Trade.Buy.Amount,usd: row.Trade.Buy.AmountInUSD}),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end', width: '108px' },
                    },
                    {
                        name: 'Buy currency',
                        cell: row => ({
                            currency: row.Trade.Buy.Currency.Symbol,
                            smartContract: row.Trade.Buy.Currency.SmartContract
                        }),
                        rendering: renderTokenLink,
                        headerStyle: { width: '108px' },
                    },
                    {
                        name: 'Buy Price',
                        cell: row => ({
                            price: row.Trade.Buy.Price,
                            usd: row.Trade.Buy.PriceInUSD
                        }),
                        rendering: renderNumberWithUSD,
                        headerStyle: { textAlign: 'end', width: '110px' },
                    },
                    {
                        name: 'Protocol',
                        cell: row => ({
                            ProtocolFamily: row.Trade.Dex.ProtocolFamily,
                            ProtocolName: row.Trade.Dex.ProtocolName,
                            ProtocolVersion: row.Trade.Dex.ProtocolVersion
                        }),
                        rendering: renderDexProtocolLink,
                    },
                    {
                        name: 'DEX SC',
                        cell: row => row.Trade.Dex.SmartContract,
                        rendering: renderJustAddressLink,
                    },
                    {
                        name: 'Pair', cell: row => ({
                            buyCurrencySymbol: row.Trade.Buy.Currency.Symbol,
                            buyCurrencySC: row.Trade.Buy.Currency.SmartContract,
                            sellCurrencySymbol: row.Trade.Sell.Currency.Symbol,
                            sellCurrencySC: row.Trade.Sell.Currency.SmartContract,
                        }),
                        headerStyle: { width: '100px' },
                        rendering: renderPairLink,
                    },
                    {
                        name: 'Tx Hash',
                        cell: row => row.Transaction.Hash,
                        rendering: renderTX,
                        headerStyle: { width: '100px' },
                    },
                ],

            }
        }
    }


    class TradesByTimeTrades extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: response => `Daily DEX Trade Count on the ${WidgetConfig.getName(response.EVM.DEXTrades[0]?.ChainId) || 'network'}`,
                id: 'TradesByTimeTrades',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Trades', cell: row => +row.trades,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['FFC106'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeAddress extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => `Unique Traders on DEX by Day`,
                theme: '<%= @theme %>',
                id: 'TradesByTimeAddress',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Trades addresses', cell: row => +row.traders,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['28A745'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeCurrencies extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => `Number of Unique Traded Currencies on DEX`,
                id: 'TradesByTimeCurrencies',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Currencies', cell: row => +row.contracts,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['28A745'],
                    legend: {position: "top"},
                }
            }
        }
    }

    class TradesByTimeContracts extends TimeChartComponent {
        configuration() {
            return {
                topElement: response => response.EVM.DEXTrades,
                chainId: response => response.EVM.DEXTrades[0]?.ChainId,
                title: () => `Unique DEX Smart Contracts Used per Day`,
                id: 'TradesByTimeContracts',
                theme: '<%= @theme %>',
                columns: [
                    {
                        name: 'Date', cell: row => row.Block.Date,
                    },
                    {
                        name: 'Uniq Contracts', cell: row => +row.currencies,
                    }
                ],
                options: {
                    height: 300,
                    theme: 'material',
                    colors: ['FFC106'],
                    legend: {position: "top"},
                }
            }
        }
    }


    const variables = {
        network: '<%= @streaming %>',
        till: new Date().toISOString().slice(0, 10),
        from: (new Date((new Date()).setDate((new Date()).getDate() - 2))).toISOString().slice(0, 10),
        mempool:false,
    }

    const fromDate = '<%= j @from %>';
    const tillDate = '<%= j @till %>';

    renderWithTime(variables, fromDate , tillDate, function f(variables) {
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [[SubTokenTradesTable, '#SubTokenTradesTable']], 'Token-Trades0_2', variables, 'Subscription-Token-Trades_5');
        renderComponent('<%=@streaming_access_token %>','<%=@use_eap %>', [
            [TradesByTimeTrades, '#TradesByTimeTrades'],
            [TradesByTimeAddress, '#TradesByTimeAddress'],
            [TradesByTimeCurrencies, '#TradesByTimeCurrencies'],
            [TradesByTimeContracts, '#TradesByTimeContracts']
        ], 'Trades-By-Time_4', variables);
    })
</script>
